from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes
)
from app.services.downloader import baixar_video, obter_titulo_video
import tempfile
import os
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéâ *Bem-vindo ao Mammoth Down!*\n\n"
        "‚ö†Ô∏è *Essa √© uma vers√£o de testes!* Ainda tem muita coisa pra ser implementada, mas voc√™ j√° pode brincar com o que est√° dispon√≠vel.\n\n"
        "üì• Use:\n"
        "`/d <link>` para baixar v√≠deo ou playlist.\n\n"
        "üìå *Exemplo:*\n"
        "`/d https://youtube.com/watch?v=...`\n\n"
        "üé¨ *V√≠deo* e *√Åudios:*.\n\n"
        "üéß * J√° testado com sucesso em:\n"
        "- YouTube\n"
        "- Instagram\n"
        "- Facebook\n"
        "- Pinterest\n"
        "- (e outras‚Ä¶ üëÄ)\n\n"
        "üí° *Tem uma ideia, sugest√£o ou bug pra reportar?* Me chama aqui: @LogosTechn. Estou coletando feedback pra deixar o Mammoth ainda mais brabo üêòüí™\n\n"
        "_Valeu por testar!_ üöÄ",
        parse_mode="Markdown"
    )


async def download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó Envie um link. Ex: `/d https://youtube.com/...`", parse_mode="Markdown")
        return

    url = context.args[0]
    is_playlist = 'playlist' in url.lower() or 'list=' in url.lower()

    # Aviso pr√©vio caso seja uma playlist
    if is_playlist:
        await update.message.reply_text("üìÇ Playlist detectada! Isso pode levar um tempinho para processar as informa√ß√µes... Segura a√≠! ‚è≥")

    await update.message.reply_text("üîé Buscando informa√ß√µes...")

    titulo = obter_titulo_video(url)
    if "Erro" in titulo:
        await update.message.reply_text(f"‚ùå {titulo}")
        return

    context.user_data["url"] = url
    context.user_data["is_playlist"] = is_playlist
    context.user_data["titulo"] = titulo

    tipo = "playlist" if is_playlist else "v√≠deo/m√∫sica"

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìπ Baixar v√≠deo", callback_data="baixar_video")],
        [InlineKeyboardButton("üéµ Apenas √°udio (MP3)",
                              callback_data="baixar_audio")],
        [InlineKeyboardButton("‚ùå Cancelar", callback_data="cancelar_download")]
    ])

    await update.message.reply_text(
        f"üé¨ Detectado:\n*{titulo}*\nTipo: *{tipo}*\n\nEscolha como deseja baixar:",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data == "cancelar_download":
        await query.edit_message_text("‚ùå Download cancelado.")
        return

    apenas_audio = data == "baixar_audio"
    url = context.user_data.get("url")
    is_playlist = context.user_data.get("is_playlist")
    titulo = context.user_data.get("titulo")

    await query.edit_message_text(f"‚è¨ Baixando {'√°udio' if apenas_audio else 'v√≠deo'}: *{titulo}*", parse_mode="Markdown")

    try:
        with tempfile.TemporaryDirectory() as tmp_dir:
            # fun√ß√£o de progresso que envia updates pro usu√°rio
            async def progresso(i, total, nome):
                await query.message.reply_text(
                    f"üì• Baixando item {i} de {total}:\n*{nome}*", parse_mode="Markdown"
                )

            # wrapper pro asyncio poder rodar callback s√≠ncrono
            def on_progress(i, total, nome):
                context.application.create_task(progresso(i, total, nome))

            resultado = baixar_video(
                url,
                apenas_audio=apenas_audio,
                destino=tmp_dir,
                is_playlist=is_playlist,
                on_progress=on_progress
            )

            arquivos = os.listdir(tmp_dir)

            if not arquivos:
                await query.message.reply_text("‚ö†Ô∏è Nenhum arquivo foi baixado.")
                return

            for nome in arquivos:
                caminho = os.path.join(tmp_dir, nome)
                tamanho = os.path.getsize(caminho)

                if tamanho > 49 * 1024 * 1024:
                    await query.message.reply_text(f"‚ö†Ô∏è '{nome}' excede 50MB e n√£o pode ser enviado via Telegram.")
                    continue

                with open(caminho, "rb") as f:
                    await query.message.reply_document(
                        document=InputFile(f, filename=nome),
                        caption=f"‚úÖ *{nome}* enviado com sucesso!",
                        parse_mode="Markdown"
                    )

            await query.message.reply_text("‚úÖ Todos os arquivos foram enviados com sucesso!")

    except Exception as e:
        await query.message.reply_text(f"‚ùå Erro no download:\n`{str(e)}`", parse_mode="Markdown")


def iniciar_bot():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("d", download))
    app.add_handler(CallbackQueryHandler(handle_callback))
    print("ü§ñ Bot do Mammoth Down est√° rodando!")
    app.run_polling()


if __name__ == "__main__":
    iniciar_bot()
